###########################################################
# This Blueprint installs the nodecellar application
# on an existing host.
###########################################################

tosca_definitions_version: cloudify_dsl_1_0

imports:  
  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.1/plugin.yaml
  - plugins/resumable_plugin/plugin.yaml
  - types/mongotypes.yaml

###########################################################
# Inputs section allows the user to use same
# blueprint several times, with different paramters for
# each time.
###########################################################

inputs:

  host_ip:
      description: >
        The ip of the host the application will be deployed on

  agent_user:
      description: >
        User name used when SSH-ing into the started machine

  agent_private_key_path:
      description: >
        Path to a private key that resided on the management machine.
        SSH-ing into agent machines will be done with this key.

node_templates:

  ###########################################################
  # We define a type that inherits cloudify's default
  # compute node, and adds monitoring capabillities
  # on top of it.
  ###########################################################

  host:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: host_ip }
      cloudify_agent:
        user: { get_input: agent_user }
        key: { get_input: agent_private_key_path }


  # This node will wait for all others to start so it can
  # publish outputs for other blueprints
  joiner:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start: scripts/mongo/set-joiner-outputs.py
    relationships:
      - type: joiner_connected_to_mongocfg
        target: mongocfg1
      - type: joiner_connected_to_mongocfg
        target: mongocfg2
      - type: joiner_connected_to_mongocfg
        target: mongocfg3
      - type: joiner_connected_to_mongod
        target: mongod1
      - type: joiner_connected_to_mongod
        target: mongod2
      - type: cloudify.relationships.contained_in
        target: host

  # MONGOD - for singlenode, explicitly run 2, for cloud
  # can use instances
  mongod1:
    type: nodecellar.nodes.Mongod
    instances:
      deploy: 1
    properties:
      port: 27400
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh

  mongod2:
    type: nodecellar.nodes.Mongod
    instances:
      deploy: 1
    properties:
      port: 27401
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh

  # MONGOCFG - for singlenode, explicitly run 3, for cloud
  # can use instances
  mongocfg1:
    type: nodecellar.nodes.Mongocfg
    instances:
      deploy: 1
    properties:
      port: 27017
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh
  mongocfg2:
    type: nodecellar.nodes.Mongocfg
    instances:
      deploy: 1
    properties:
      port: 27018
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh
  mongocfg3:
    type: nodecellar.nodes.Mongocfg
    instances:
      deploy: 1
    properties:
      port: 27019
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh


outputs:
  cluster_info:
    description: Mongo cluster info
    value:
      cfghosts: { get_attribute: [ joiner, cfghosts ]}
      dbhosts: { get_attribute: [ joiner, dbhosts ]}
