###########################################################
# This Blueprint installs the nodecellar application
# on an existing host.
###########################################################

tosca_definitions_version: cloudify_dsl_1_2

imports:  
  - http://getcloudify.org/spec/cloudify/3.3/types.yaml
  - http://getcloudify.org/spec/diamond-plugin/1.3/plugin.yaml
  - http://getcloudify.org/spec/openstack-plugin/1.3/plugin.yaml
  - plugins/resumable_plugin/plugin.yaml
  - types/mongotypes.yaml


inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  flavor:
    description: >
      Flavor of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

node_templates:

  mongod_host:
    type: cloudify.openstack.nodes.Server
    instances:
      deploy: 1
    properties:
      cloudify_agent:
        user: { get_input: agent_user }
        wait_started_timeout: 60
      server:
        image: { get_input: image }
        flavor: { get_input: flavor }
    relationships:
      - target: mongod_security_group
        type: cloudify.openstack.server_connected_to_security_group

  mongod_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: mongod_security_group
        description: mongod security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ mongod, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 28017

  mongod:
    type: nodecellar.nodes.Mongod
    instances:
      deploy: 1
    properties:
      port: 27400
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh

#  mongoc_host:
#    type: nodecellar.nodes.MonitoredServer
#    instances:
#      deploy: 3
#    relationships:
#
#      ###########################################################
#      # Attaching the mongo security group to the mongo host
#      ###########################################################
#
#      - target: mongoc_security_group
#        type: cloudify.openstack.server_connected_to_security_group
#
#  mongoc_security_group:
#    type: cloudify.openstack.nodes.SecurityGroup
#    properties:
#      security_group:
#        name: mongoc_security_group
#        description: mongoc security group
#      rules:
#        - remote_ip_prefix: 0.0.0.0/0
#          port: { get_property: [ mongoc, port ] }
#        - remote_ip_prefix: 0.0.0.0/0
#          port: 28017
#
#  mongoc:
#    type: nodecellar.nodes.Mongocfg
#    instances:
#      deploy: 1
#    properties:
#      port: 27400
#    relationships:
#      - type: cloudify.relationships.contained_in
#        target: mongoc_host
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        configure: scripts/mongo/install-pymongo.sh
#
#  joiner:
#    type: cloudify.nodes.Compute
#    properties:
#      install_agent: false
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        configure:
#          implementation: scripts/mongo/install-pymongo.sh
#          executor: central_deployment_agent
#        start:
#          implementation: scripts/mongo/set-joiner-outputs.py
#          executor: central_deployment_agent
#    relationships:
#      - type: joiner_connected_to_mongocfg
#        target: mongoc
#      - type: joiner_connected_to_mongod
#        target: mongod
#

#outputs:
#  cluster_info:
#    description: Mongo cluster info
#    value:
#      cfghosts: { get_attribute: [ joiner, cfghosts ]}
#      dbhosts: { get_attribute: [ joiner, dbhosts ]}
